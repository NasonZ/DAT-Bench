[project]
name = "divergent-bench"
version = "0.2.0"
description = "A benchmark for evaluating divergent thinking and query decomposition in language models"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Divergent Bench Contributors"},
]
keywords = ["creativity", "divergent-thinking", "llm", "benchmark", "dat", "ai-evaluation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.10"
dependencies = [
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    "pydantic>=2.0.0",
    "openai>=1.0.0",
    "anthropic>=0.18.0",
    "python-dotenv>=1.0.0",
    "instructor>=1.0.0",
    "tiktoken>=0.5.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
    "pandas>=2.0.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "ipython>=8.10.0",
    "jupyter>=1.0.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
]

[project.urls]
Homepage = "https://github.com/NasonZ/DAT-Bench"
Documentation = "https://github.com/NasonZ/DAT-Bench"
Repository = "https://github.com/NasonZ/DAT-Bench"
Issues = "https://github.com/NasonZ/DAT-Bench/issues"

[project.scripts]
divergent-bench = "divergent_bench.cli:app"

[build-system]
requires = ["hatchling>=1.21.0"]
build-backend = "hatchling.build"

[tool.hatch.build]
include = [
    "divergent_bench/**/*.py",
    "divergent_bench/**/*.json",
    "divergent_bench/**/*.txt",
    "README.md",
    "LICENSE",
]
exclude = [
    "tests/",
    "docs/",
    "scripts/",
    "*.pyc",
    "__pycache__/",
    ".pytest_cache/",
    ".mypy_cache/",
]

[tool.hatch.build.targets.wheel]
packages = ["divergent_bench"]

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.4",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "black>=23.12.0",
    "ruff>=0.1.9",
    "mypy>=1.8.0",
    "ipython>=8.18.1",
    "jupyter>=1.0.0",
]

[tool.uv.sources]
divergent-bench = { workspace = true }

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = [
    "--verbose",
    "--strict-markers",
    "--tb=short",
    "--cov=divergent_bench",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.black]
line-length = 100
target-version = ["py310", "py311", "py312"]
include = '\.pyi?$'

[tool.ruff]
line-length = 100
target-version = "py310"
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # imported but unused

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true
namespace_packages = true
explicit_package_bases = true